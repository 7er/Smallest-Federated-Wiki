// Generated by CoffeeScript 1.4.0
(function() {
  var advance, bind, days, decode, emit, explain, hours, human, intervals, months, soon, summarize;

  intervals = {
    'HOURLY': 'HOURLY',
    'DAILY': 'DAILY',
    'WEEKLY': 'WEEKLY',
    'MONTHLY': 'MONTHLY',
    'YEARLY': 'YEARLY'
  };

  hours = {
    'MIDNIGHT': 'MIDNIGHT',
    'MORNING': 'MORNING',
    'NOON': 'NOON',
    'AFTERNOON': 'AFTERNOON'
  };

  days = {
    'SUNDAY': 'SUNDAY',
    'MONDAY': 'MONDAY',
    'TUESDAY': 'TUESDAY',
    'WEDNESDAY': 'WEDNESDAY',
    'THURSDAY': 'THURSDAY',
    'FRIDAY': 'FRIDAY',
    'SATURDAY': 'SATURDAY'
  };

  months = {
    'JANUARY': 'JANUARY',
    'FEBUARY': 'FEBUARY',
    'MARCH': 'MARCH',
    'APRIL': 'APRIL',
    'MAY': 'MAY',
    'JUNE': 'JUNE',
    'JULY': 'JULY',
    'AUGUST': 'AUGUST',
    'SEPTEMBER': 'SEPTEMBER',
    'OCTOBER': 'OCTOBER',
    'NOVEMBER': 'NOVEMBER',
    'DECEMBER': 'DECEMBER'
  };

  decode = function(text) {
    var issue, schedule, word, _i, _len, _ref;
    schedule = [];
    issue = null;
    _ref = text.match(/\S+/g);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      word = _ref[_i];
      if (intervals[word]) {
        schedule.push(issue = {
          interval: word,
          recipients: []
        });
      } else if (days[word]) {
        issue.offset = word;
      } else if (word.match(/@/)) {
        issue.recipients.push(word);
      } else {
        schedule.push({
          trouble: word
        });
      }
    }
    return schedule;
  };

  human = function(msecs) {
    var hrs, mins, secs, weeks, years;
    if ((secs = msecs / 1000) < 2) {
      return "" + (Math.floor(msecs)) + " milliseconds";
    }
    if ((mins = secs / 60) < 2) {
      return "" + (Math.floor(secs)) + " seconds";
    }
    if ((hrs = mins / 60) < 2) {
      return "" + (Math.floor(mins)) + " minutes";
    }
    if ((days = hrs / 24) < 2) {
      return "" + (Math.floor(hrs)) + " hours";
    }
    if ((weeks = days / 7) < 2) {
      return "" + (Math.floor(days)) + " days";
    }
    if ((months = days / 30.5) < 2) {
      return "" + (Math.floor(weeks)) + " weeks";
    }
    if ((years = days / 365) < 2) {
      return "" + (Math.floor(months)) + " months";
    }
    return "" + (Math.floor(years)) + " years";
  };

  advance = function(date, interval, count) {
    var d, h, m, y, _ref;
    _ref = [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours()], y = _ref[0], m = _ref[1], d = _ref[2], h = _ref[3];
    switch (interval) {
      case 'HOURLY':
        return new Date(y, m, d, h + count);
      case 'DAILY':
        return new Date(y, m, d + count);
      case 'WEEKLY':
        return new Date(y, m, d - date.getDay() + 7 * count);
      case 'MONTHLY':
        return new Date(y, m + count);
      case 'YEARLY':
        return new Date(y + count);
    }
  };

  soon = function(issue) {
    var next, now;
    now = new Date();
    next = advance(now, issue.interval, 1);
    return human(next.getTime() - now.getTime());
  };

  explain = function(issue) {
    if (issue.interval != null) {
      return "reporting " + issue.interval + " for " + issue.recipients.length + " recipients in " + (soon(issue));
    } else if (issue.trouble != null) {
      return "don't expect: <span class=error>" + issue.trouble + "</span>";
    } else {
      return "trouble";
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = {
      intervals: intervals,
      decode: decode,
      explain: explain
    };
  }

  summarize = function(schedule) {
    var issue;
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = schedule.length; _i < _len; _i++) {
        issue = schedule[_i];
        _results.push(explain(issue));
      }
      return _results;
    })()).join("<br>");
  };

  emit = function($item, item) {
    return $item.append($("<p>" + (summarize(decode(item.text))) + "</p>"));
  };

  bind = function($item, item) {
    return $item.dblclick(function() {
      return wiki.textEditor($item, item);
    });
  };

  if (typeof window !== "undefined" && window !== null) {
    window.plugins.report = {
      emit: emit,
      bind: bind
    };
  }

}).call(this);
