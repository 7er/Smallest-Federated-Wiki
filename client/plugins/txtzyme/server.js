// Generated by CoffeeScript 1.4.0
(function() {
  var WebSocketServer, es, fs, startServer, txtzymeDevice;

  WebSocketServer = require('ws').Server;

  fs = require('fs');

  es = require('event-stream');

  txtzymeDevice = function(done) {
    var result;
    result = null;
    if (process.platform === "win32") {
      return done("on windows...");
    }
    return fs.readdir('/dev', function(err, files) {
      var file, _i, _len;
      if (err) {
        done(err);
      }
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.match(/^ttyACM/)) {
          result = file;
        }
        if (file.match(/^cu.usbmodem1234/)) {
          result = file;
        }
      }
      if (result) {
        return done(null, "/dev/" + result);
      }
      return done("can't find txtzyme device");
    });
  };

  startServer = function(params) {
    var server;
    server = new WebSocketServer({
      server: params.server,
      path: '/plugin/txtzyme'
    });
    return txtzymeDevice(function(err, fn) {
      var fromDevice, rawDevice, toDevice;
      if (err) {
        return console.log(err);
      }
      toDevice = fs.createWriteStream(fn);
      toDevice.on('error', function(err) {
        return console.log("trouble writing txtzyme to " + fn);
      });
      rawDevice = fs.createReadStream(fn);
      rawDevice.on('error', function(err) {
        return console.log("trouble reading txtzyme from " + fn);
      });
      fromDevice = rawDevice.pipe(es.split());
      return server.on('connection', function(socket) {
        console.log('connection established, listening');
        fromDevice.on('data', function(line) {
          return socket.send(line, function(err) {
            if (err) {
              return console.log('txtzyme send err', err);
            }
          });
        });
        return socket.on('message', function(message) {
          return toDevice.write(message);
        });
      });
    });
  };

  module.exports = {
    startServer: startServer
  };

}).call(this);
