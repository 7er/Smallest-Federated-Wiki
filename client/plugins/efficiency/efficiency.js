// Generated by CoffeeScript 1.4.0
(function() {

  window.plugins.efficiency = {
    efficiencyDIV: null,
    emit: function(div, item) {
      wiki.log('efficiency', div, item);
      div.addClass('data');
      $('<p />').addClass('readout').appendTo(div).text("0%");
      this.efficiencyDIV = div;
      return $('<p />').html(wiki.resolveLinks(item.text || 'efficiency')).appendTo(div);
    },
    bind: function(div, item) {
      var calculate, calculatePercentage, calculateStrategy_GrayBinary, getImageData, lastThumb, locate, setEfficiencyReadoutValue,
        _this = this;
      lastThumb = null;
      div.find('p:first').dblclick(function(e) {
        return wiki.dialog("JSON for " + item.text, $('<pre/>').text("something good"));
      });
      div.find('p:last').dblclick(function() {
        return wiki.textEditor(div, item);
      });
      locate = function() {
        var idx, who;
        idx = $('.item').index(div);
        who = $(".item:lt(" + idx + ")").filter('.image').toArray().reverse();
        return who.last();
      };
      calculate = function(div) {
        var data, value;
        data = getImageData(div);
        value = calculatePercentage(data);
        return setEfficiencyReadoutValue(value);
      };
      getImageData = function(div) {
        var c, d, imageData, img, src;
        src = $(div).find('img').get(0);
        c = $('<canvas id="myCanvas" width="200" height="100" style="border:1px solid #c3c3c3;">');
        d = c.get(0).getContext("2d");
        img = new Image();
        img.src = src;
        d.drawImage(src, 0, 0);
        imageData = d.getImageData(0, 0, 200, 100);
        return imageData.data;
      };
      calculatePercentage = function(data) {
        return calculateStrategy_GrayBinary(data);
      };
      calculateStrategy_GrayBinary = function(data) {
        var B, G, R, i, l, luma, lumaHighCount, lumaLowCount, lumaMax, lumaMid, lumaMin, lumas, numPix, percentage, _i, _j, _len;
        numPix = data.length / 4;
        lumaMin = 255;
        lumaMax = 0;
        lumas = [];
        for (i = _i = 0; 0 <= numPix ? _i <= numPix : _i >= numPix; i = 0 <= numPix ? ++_i : --_i) {
          R = data[i * 4 + 0];
          G = data[i * 4 + 1];
          B = data[i * 4 + 2];
          luma = lumas[i] = 0.299 * R + 0.587 * G + 0.114 * B;
          if (luma > lumaMax) {
            lumaMax = luma;
          }
          if (luma < lumaMin) {
            lumaMin = luma;
          }
        }
        lumaMid = (lumaMax - lumaMin) / 2;
        lumaLowCount = 0;
        lumaHighCount = 0;
        for (_j = 0, _len = lumas.length; _j < _len; _j++) {
          l = lumas[_j];
          if (l <= lumaMid) {
            lumaLowCount++;
          } else {
            lumaHighCount++;
          }
        }
        percentage = lumaHighCount / numPix;
        return percentage;
      };
      setEfficiencyReadoutValue = function(value) {
        if (_this.efficiencyDIV) {
          return $(_this.efficiencyDIV)[0].innerHTML = '<p class="readout">' + value + '%</p><p>Pattern Efficiency from Photographic Statistics</p>';
        }
      };
      return calculate(locate());
    }
  };

}).call(this);
