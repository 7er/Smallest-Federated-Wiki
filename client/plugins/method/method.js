// Generated by CoffeeScript 1.3.3
(function() {
  var annotate, asValue, avg, perform, print, round, sum;

  asValue = function(obj) {
    if (obj == null) {
      return NaN;
    }
    switch (obj.constructor) {
      case Number:
        return obj;
      case String:
        return +obj;
      case Array:
        return asValue(obj[0]);
      case Object:
        return asValue(obj.value);
      case Function:
        return obj();
      default:
        return NaN;
    }
  };

  sum = function(v) {
    return _.reduce(v, function(s, n) {
      return s += n;
    }, 0);
  };

  avg = function(v) {
    return sum(v) / v.length;
  };

  round = function(n) {
    if (n == null) {
      return '?';
    }
    if (n.toString().match(/\.\d\d\d/)) {
      return n.toFixed(2);
    } else {
      return n;
    }
  };

  annotate = function(text) {
    if (text == null) {
      return '';
    }
    return " <span title=\"" + text + "\">*</span>";
  };

  print = function(report, value, hover, line, comment, color) {
    var long;
    long = '';
    if (line.length > 40) {
      long = line;
      line = "" + (line.substr(0, 20)) + " ... " + (line.substr(-15));
    }
    return report.push("<tr style=\"background:" + color + ";\">\n  <td style=\"width: 20%; text-align: right;\" title=\"" + (hover || '') + "\">\n    <b>" + (round(value)) + "</b>\n  <td title=\"" + long + "\">" + line + (annotate(comment)));
  };

  perform = function(div, item, input, output, report, done) {
    var attach, calculate, lookup, polynomial;
    attach = function(search) {
      var elem, source, _i, _len, _ref;
      _ref = wiki.getDataNodes(div);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        if ((source = $(elem).data('item')).text.indexOf(search) >= 0) {
          return source.data;
        }
      }
      throw new Error("can't find dataset with caption " + search);
    };
    lookup = function(v) {
      var row, table;
      table = attach('Tier3ExposurePercentages');
      row = _.find(table, function(row) {
        return asValue(row.Exposure) === v[0] && asValue(row.Raw) === v[1];
      });
      if (row == null) {
        throw new Error("can't find exposure " + v[0] + " and raw " + v[1]);
      }
      return asValue(row.Percentage);
    };
    polynomial = function(v, subtype) {
      var result, row, table;
      table = attach('Tier3Polynomials');
      row = _.find(table, function(row) {
        return ("" + row.SubType + " Scaled") === subtype && asValue(row.Min) <= v && asValue(row.Max) > v;
      });
      if (row == null) {
        throw new Error("can't find applicable polynomial for " + v + " in '" + subtype + "'");
      }
      result = asValue(row.C0);
      result += asValue(row.C1) * v;
      result += asValue(row.C2) * Math.pow(v, 2);
      result += asValue(row.C3) * Math.pow(v, 3);
      result += asValue(row.C4) * Math.pow(v, 4);
      result += asValue(row.C5) * Math.pow(v, 5);
      result += asValue(row.C6) * Math.pow(v, 6);
      if (asValue(row['One minus'])) {
        return 1 - result;
      } else {
        return result;
      }
    };
    calculate = function(item, report, done) {
      var dispatch, lines, list;
      list = [];
      lines = item.text.split("\n");
      dispatch = function(list, lines, report, done) {
        var apply, args, change, color, comment, count, hover, line, next_dispatch, previous, result, value, _ref, _ref1;
        color = '#eee';
        value = comment = hover = null;
        line = lines.shift();
        if (line == null) {
          return done(report);
        }
        next_dispatch = function() {
          if ((value != null) && !isNaN(+value)) {
            list.push(+value);
          }
          if (report != null) {
            print(report, value, hover, line, comment, color);
          }
          return dispatch(list, lines, report, done);
        };
        apply = function(name, list, label) {
          color = '#ddd';
          switch (name) {
            case 'SUM':
              return sum(list);
            case 'AVG':
            case 'AVERAGE':
              return avg(list);
            case 'MIN':
            case 'MINIMUM':
              return _.min(list);
            case 'MAX':
            case 'MAXIMUM':
              return _.max(list);
            case 'FIRST':
              return list[0];
            case 'PRODUCT':
              return _.reduce(list, function(p, n) {
                return p *= n;
              });
            case 'LOOKUP':
              return lookup(list);
            case 'POLYNOMIAL':
              return polynomial(list[0], label);
            default:
              throw new Error("don't know how to " + name);
          }
        };
        try {
          if (args = line.match(/^([0-9.eE-]+) +([\w \/%(){},&-]+)$/)) {
            result = +args[1];
            line = args[2];
            output[line] = value = result;
          } else if (args = line.match(/^([A-Z]+) +([\w \/%(){},&-]+)$/)) {
            _ref = [apply(args[1], list, args[2]), [], list.length], value = _ref[0], list = _ref[1], count = _ref[2];
            hover = "" + args[1] + " of " + count + " numbers\n= " + value;
            line = args[2];
            if (((output[line] != null) || (input[line] != null)) && !item.silent) {
              previous = asValue(output[line] || input[line]);
              if (Math.abs(change = value / previous - 1) > 0.0001) {
                comment = "previously " + previous + "\nÎ” " + (round(change * 100)) + "%";
              }
            }
            output[line] = value;
          } else if (args = line.match(/^([A-Z]+)$/)) {
            _ref1 = [apply(args[1], list), [], list.length], value = _ref1[0], list = _ref1[1], count = _ref1[2];
            hover = "" + args[1] + " of " + count + " numbers\n= " + value;
          } else if (line.match(/^[0-9\.eE-]+$/)) {
            value = +line;
            line = '';
          } else if (args = line.match(/^ *([\w \/%(){},&-]+)$/)) {
            if (output[args[1]] != null) {
              value = output[args[1]];
            } else if (input[args[1]] != null) {
              value = asValue(input[args[1]]);
            } else {
              color = '#edd';
              comment = "can't find value of '" + line + "'";
            }
          } else {
            color = '#edd';
            comment = "can't parse '" + line + "'";
          }
        } catch (err) {
          color = '#edd';
          value = null;
          comment = err.message;
        }
        return next_dispatch();
      };
      return dispatch(list, lines, report, function(report) {
        var table, text;
        if (report) {
          text = report.join("\n");
          table = $('<table style="width:100%; background:#eee; padding:.8em; margin-bottom:5px;"/>').html(text);
          div.append(table);
          div.dblclick(function(e) {
            if (e.shiftKey) {
              return wiki.dialog("JSON for Method plugin", $('<pre/>').text(JSON.stringify(item, null, 2)));
            } else {
              return wiki.textEditor(div, item);
            }
          });
        }
        return done(output);
      });
    };
    return calculate(item, report, done);
  };

  window.plugins.method = {
    emit: function(div, item) {},
    bind: function(div, item) {
      var candidates, elem, input, output, _i, _len;
      input = {};
      output = {};
      candidates = $(".item:lt(" + ($('.item').index(div)) + ")");
      for (_i = 0, _len = candidates.length; _i < _len; _i++) {
        elem = candidates[_i];
        elem = $(elem);
        if (elem.hasClass('radar-source')) {
          _.extend(input, elem.get(0).radarData());
        } else if (elem.hasClass('data')) {
          _.extend(input, elem.data('item').data[0]);
        }
      }
      div.addClass('radar-source');
      div.get(0).radarData = function() {
        return output;
      };
      div.mousemove(function(e) {
        return $(div).triggerHandler('thumb', $(e.target).text());
      });
      return perform(div, item, input, output, [], function() {});
    },
    "eval": function(div, item, input, done) {
      var output;
      output = {};
      output.foo = input.foo + 1;
      return perform(div, item, input, output, null, function() {
        return done(output);
      });
    }
  };

}).call(this);
